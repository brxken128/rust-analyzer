name: release
permissions: read-all

on:
    schedule:
        - cron: 0 1 * * * # midnight BST
    workflow_dispatch: {}

env:
    CARGO_INCREMENTAL: 0
    CARGO_NET_RETRY: 10
    RUSTFLAGS: -D warnings -W unreachable-pub
    RUSTUP_MAX_RETRIES: 10
    FETCH_DEPTH: 0 # pull in the tags for the version string
    # MACOSX_DEPLOYMENT_TARGET: 13

jobs:
    dist:
        strategy:
            matrix:
                include:
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      code-target: linux-x64
                      container: ubuntu:22.04
                    - os: macos-latest
                      target: aarch64-apple-darwin
                      code-target: darwin-arm64

        name: dist (${{ matrix.target }})
        runs-on: ${{ matrix.os }}
        container: ${{ matrix.container }}

        env:
            RA_TARGET: ${{ matrix.target }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                  fetch-depth: ${{ env.FETCH_DEPTH }}

            - name: Install toolchain dependencies
              if: matrix.container == 'ubuntu:22.04'
              shell: bash
              run: |
                  apt-get update && apt-get install -y build-essential curl
                  curl --proto '=https' --tlsv1.2 -fsSL "https://sh.rustup.rs" | sh -s -- --profile minimal --default-toolchain none -y
                  echo "${CARGO_HOME:-$HOME/.cargo}/bin" >> $GITHUB_PATH

            - name: Install Rust toolchain
              run: |
                  rustup update --no-self-update stable
                  rustup target add ${{ matrix.target }}
                  rustup component add rust-src

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Update apt repositories
              if: matrix.target == 'x86_64-unknown-linux-gnu'
              run: sudo apt-get update

            - name: Dist
              run: cargo xtask dist --client-patch-version ${{ github.run_number }}

            - run: npm ci
              working-directory: editors/code

            - name: Package Extension (release)
              run: npx vsce package -o "../../dist/rust-analyzer-${{ matrix.code-target }}.vsix" --target ${{ matrix.code-target }}
              working-directory: editors/code

            - name: Upload artifacts
              uses: actions/upload-artifact@v1
              with:
                  name: dist-${{ matrix.target }}
                  path: ./dist

    # publish:
    #     name: publish
    #     runs-on: ubuntu-latest
    #     needs: dist
    #     steps:
    #         - name: Install Nodejs
    #           uses: actions/setup-node@v3
    #           with:
    #               node-version: 16

    #         - run: echo "TAG=$(date --iso -u)" >> $GITHUB_ENV
    #         - run: 'echo "TAG: $TAG"'

    #         - name: Checkout repository
    #           uses: actions/checkout@v3
    #           with:
    #               fetch-depth: ${{ env.FETCH_DEPTH }}

    #         - run: echo "HEAD_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
    #         - run: 'echo "HEAD_SHA: $HEAD_SHA"'

    #         - uses: actions/download-artifact@v1
    #           with:
    #               name: dist-aarch64-apple-darwin
    #               path: dist

    #         - uses: actions/download-artifact@v1
    #           with:
    #               name: dist-x86_64-unknown-linux-gnu
    #               path: dist

    #         - name: Publish Release
    #           uses: ./.github/actions/github-release
    #           with:
    #               files: dist/*
    #               name: ${{ env.TAG }}
    #               token: ${{ secrets.GITHUB_TOKEN }}

    #         - run: npm ci
    #           working-directory: ./editors/code

    #         - name: Publish Extension (OpenVSX, release)
    #           if: github.repository == 'brxken128/rust-analyzer'
    #           working-directory: ./editors/code
    #           run: npx ovsx publish --pat ${{ secrets.OPENVSX_TOKEN }} --packagePath ../../dist/rust-analyzer-*.vsix
